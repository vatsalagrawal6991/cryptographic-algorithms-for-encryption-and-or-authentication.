import execute_crypto as ec
import time


obj = ec.ExecuteCrypto()

start = time.perf_counter()
a = obj.generate_keys()
end = time.perf_counter()
print("Time")
print(end-start)
#a1 = obj.generate_keys()
#print(a)
print("")
print("")
print("")
print ("Key length")
asd = [len(x)*8 for x in a]
print(asd)
print("")
print("")
print("")


start = time.perf_counter()
b = obj.generate_nonces()
end = time.perf_counter()
print("Time")
print(end-start)
#print(b)
print("")
print("")
print("")


file1 = open("/autograder/submission/original_plaintext.txt")
data = file1.read()
print(data)
print ("Plaintext Length")
print(len(bytes(data, "utf-8"))*8) #6784
#print(len(data.encode())*8)
print("")
print("")
print("")


start = time.perf_counter()
c = obj.encrypt('AES-128-CBC-ENC',a[0],data,b[0])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("")

start = time.perf_counter()
d = obj.decrypt('AES-128-CBC-DEC',a[0],c,b[0])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length & Type")
print(len(bytes(c, "utf-8"))*8)
print(type(c))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.encrypt('AES-128-CTR-ENC',a[0],data,b[1])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("")

start = time.perf_counter()
d = obj.decrypt('AES-128-CTR-DEC',a[0],c,b[1])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length & Type")
print(len(bytes(c, "utf-8"))*8)
print(type(c))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.encrypt('RSA-2048-ENC',a[3],a[0],b[2])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("")

start = time.perf_counter()
d = obj.decrypt('RSA-2048-DEC',a[4],c,b[2])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length & Type")
print(len(bytes(c, "utf-8"))*8)
print(type(c))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.generate_auth_tag('AES-128-CMAC-GEN', a[0], data, b[3])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
#c1 = obj.generate_auth_tag('AES-128-CMAC-GEN', a1[0], data, b[3])
print("")

start = time.perf_counter()
d = obj.verify_auth_tag('AES-128-CMAC-VRF', a[0], data, b[3], c)
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length(tag,data,total) & Type")
print(len(bytes(c, "utf-8"))*8)
print(len(bytes(data, "utf-8"))*8)
print((len(bytes(c, "utf-8"))*8) + (len(bytes(data, "utf-8"))*8))
print(type(c))
print(type(data))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.generate_auth_tag('SHA3-256-HMAC-GEN', a[0], data, b[4])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
#c1 = obj.generate_auth_tag('SHA3-256-HMAC-GEN', a1[0], data, b[4])
print("")

start = time.perf_counter()
d = obj.verify_auth_tag('SHA3-256-HMAC-VRF', a[0], data, b[4], c)
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length(tag,data,total) & Type")
print(len(bytes(c, "utf-8"))*8)
print(len(bytes(data, "utf-8"))*8)
print((len(bytes(c, "utf-8"))*8) + (len(bytes(data, "utf-8"))*8))
print(type(c))
print(type(data))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.generate_auth_tag('RSA-2048-SHA3-256-SIG-GEN', a[2], data, b[5])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
#c1 = obj.generate_auth_tag('RSA-2048-SHA3-256-SIG-GEN', a1[2], data, b[5])
print("")

start = time.perf_counter()
d = obj.verify_auth_tag('RSA-2048-SHA3-256-SIG-VRF', a[1], data, b[5], c)
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length(tag,data,total) & Type")
print(len(bytes(c, "utf-8"))*8)
print(len(bytes(data, "utf-8"))*8)
print((len(bytes(c, "utf-8"))*8) + (len(bytes(data, "utf-8"))*8))
print(type(c))
print(type(data))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.generate_auth_tag('ECDSA-256-SHA3-256-SIG-GEN', a[6], data, b[6])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
#c1 = obj.generate_auth_tag('ECDSA-256-SHA3-256-SIG-GEN', a1[6], data, b[6])
print("")

start = time.perf_counter()
d = obj.verify_auth_tag('ECDSA-256-SHA3-256-SIG-VRF', a[5], data, b[6], c)
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length(tag,data,total) & Type")
print(len(bytes(c, "utf-8"))*8)
print(len(bytes(data, "utf-8"))*8)
print((len(bytes(c, "utf-8"))*8) + (len(bytes(data, "utf-8"))*8))
print(type(c))
print(type(data))
print("")
print("")
print("")


start = time.perf_counter()
c = obj.encrypt_generate_auth('AES-128-GCM-GEN', a[0], a[0], data, b[7])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
#c1 = obj.encrypt_generate_auth('AES-128-GCM-GEN', a1[0], a[0], data, b[7])
print("")

start = time.perf_counter()
d = obj.decrypt_verify_auth('AES-128-GCM-VRF', a[0], a[0], c[0], b[7], c[1])
end = time.perf_counter()
print("Time")
print((end-start)*1000)
print("Packet Output Length(tag,data,total) & Type")
print(len(bytes(c[1], "utf-8"))*8)
print(len(bytes(c[0], "utf-8"))*8)
print((len(bytes(c[0], "utf-8"))*8) + (len(bytes(c[1], "utf-8")))*8)
print(type(c[1]))
print(type(c[0]))
